name: Deploy Minecraft Server

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Branch to deploy
        required: false
        default: main
      backup:
        description: Optional backup timestamp to restore
        required: false
        default: ""
      new_fork:
        description: Server fork (Bukkit/Spigot/Paper/Tuinity/Purpur)
        required: false
        default: ""
      server_jar_url:
        description: Direct URL to server .jar
        required: false
        default: ""
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        id: vars
        run: |
          BRANCH_INPUT="${{ github.event.inputs.branch }}"
          if [ -z "$BRANCH_INPUT" ]; then BRANCH_INPUT="${{ github.ref_name }}"; fi
          echo "branch=$BRANCH_INPUT" >> "$GITHUB_OUTPUT"
          echo "backup=${{ github.event.inputs.backup }}" >> "$GITHUB_OUTPUT"
          echo "repo_https=https://github.com/${{ github.repository }}.git" >> "$GITHUB_OUTPUT"

      - name: SSH and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: |
            REMOTE_APP_DIR,MINECRAFT_DIR,GIT_REPO,GIT_BRANCH,BACKUP_TO_RESTORE,
            POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB,POSTGRES_PORT,POSTGRES_DATA_DIR,
            REDIS_PORT,REDIS_DATA_DIR,NEW_FORK,SERVER_JAR_URL
          script: |
            set -euxo pipefail

            REMOTE_APP_DIR="${REMOTE_APP_DIR:-/opt/minecraft/app}"
            MINECRAFT_DIR="${MINECRAFT_DIR:-/opt/minecraft/server}"

            # Ensure required packages
            if ! command -v git >/dev/null 2>&1; then
              apt-get update -y
              apt-get install -y git curl docker.io docker-compose-plugin
              systemctl enable --now docker || true
            fi

            # Clone or update repo
            mkdir -p "$REMOTE_APP_DIR"
            chown -R "$USER":"$USER" "$REMOTE_APP_DIR"
            if [ ! -d "$REMOTE_APP_DIR/.git" ]; then
              git clone "$GIT_REPO" "$REMOTE_APP_DIR"
            fi
            cd "$REMOTE_APP_DIR"
            git fetch --all --prune
            git checkout -q "$GIT_BRANCH" || git checkout -q -b "$GIT_BRANCH" "origin/$GIT_BRANCH"
            git reset --hard "origin/$GIT_BRANCH"

            # 1-2. Ensure Postgres/Redis via docker compose with env from secrets
            # Prepare data dirs with correct ownership to avoid permission errors
            POSTGRES_DATA_DIR_OVERRIDE="${POSTGRES_DATA_DIR:-}"
            if [ -z "$POSTGRES_DATA_DIR_OVERRIDE" ]; then
              POSTGRES_DATA_DIR_OVERRIDE="$(cd "$REMOTE_APP_DIR" && cd .. && pwd)/data/postgres"
              export POSTGRES_DATA_DIR="$POSTGRES_DATA_DIR_OVERRIDE"
            fi
            mkdir -p "$POSTGRES_DATA_DIR"

            REDIS_DATA_DIR_OVERRIDE="${REDIS_DATA_DIR:-}"
            if [ -z "$REDIS_DATA_DIR_OVERRIDE" ]; then
              REDIS_DATA_DIR_OVERRIDE="$(cd "$REMOTE_APP_DIR" && cd .. && pwd)/data/redis"
              export REDIS_DATA_DIR="$REDIS_DATA_DIR_OVERRIDE"
            fi
            mkdir -p "$REDIS_DATA_DIR"

            export POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB POSTGRES_PORT POSTGRES_DATA_DIR
            export REDIS_PORT REDIS_DATA_DIR
            docker compose -f deploy/docker-compose.yml up -d

            # Prepare dirs and avoid self-referencing symlink
            mkdir -p "$MINECRAFT_DIR"
            if [ "$MINECRAFT_DIR" != "$REMOTE_APP_DIR/server" ]; then
              ln -snf "$MINECRAFT_DIR" "$REMOTE_APP_DIR/server"
            fi

            # 3. Backup worlds
            bash scripts/backup_worlds.sh

            # 4. Reinstall server (expects --new_fork and --url from secrets or hardcode here)
            if [ -z "${NEW_FORK:-}" ] || [ -z "${SERVER_JAR_URL:-}" ]; then
              echo "Set NEW_FORK and SERVER_JAR_URL as Action secrets/vars" >&2
              exit 1
            fi
            NEW_FORK="$NEW_FORK" URL="$SERVER_JAR_URL"
            bash scripts/reinstall_server.sh --new_fork "$NEW_FORK" --url "$SERVER_JAR_URL"

            # 5. Restore worlds (optional specific backup) â€” single-line if to avoid wrapper exiting on false condition
            if [ -n "$BACKUP_TO_RESTORE" ]; then bash scripts/restore_worlds.sh --backup "$BACKUP_TO_RESTORE"; else bash scripts/restore_worlds.sh; fi

            # 6-7. Generate dynamic config(s) from agreed env vars and sync
            bash scripts/generate_drts_config.sh

            bash scripts/sync_configs.sh
            bash scripts/sync_plugins.sh

            # 8. Install cron backup (user-level)
            bash scripts/install_cron_backup.sh

        env:
          REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}
          MINECRAFT_DIR: ${{ secrets.MINECRAFT_DIR }}
          GIT_REPO: ${{ steps.vars.outputs.repo_https }}
          GIT_BRANCH: ${{ steps.vars.outputs.branch }}
          BACKUP_TO_RESTORE: ${{ steps.vars.outputs.backup }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DATA_DIR: ${{ secrets.POSTGRES_DATA_DIR }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_DATA_DIR: ${{ secrets.REDIS_DATA_DIR }}
          NEW_FORK: ${{ github.event.inputs.new_fork || vars.NEW_FORK || secrets.NEW_FORK }}
          SERVER_JAR_URL: ${{ github.event.inputs.server_jar_url || vars.SERVER_JAR_URL || secrets.SERVER_JAR_URL }}

      - name: Install and start systemd service
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: |
            REMOTE_APP_DIR
          script: |
            set -euxo pipefail

            REMOTE_APP_DIR="${REMOTE_APP_DIR:-/opt/minecraft/app}"

            # Install/refresh service as root and start it (absolute paths; no reliance on cwd)
            if [ ! -x "$REMOTE_APP_DIR/scripts/install_systemd_service.sh" ]; then
              chmod +x "$REMOTE_APP_DIR/scripts/install_systemd_service.sh" || true
            fi
            bash "$REMOTE_APP_DIR/scripts/install_systemd_service.sh" --service-name minecraft-server-service --user minecraft --workdir "$REMOTE_APP_DIR"
            systemctl daemon-reload
            systemctl enable --now minecraft-server-service
            systemctl status minecraft-server-service --no-pager | cat
        env:
          REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}
